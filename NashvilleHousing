-- Standardize Date Format
ALTER TABLE NashvilleHousing
ADD SalesDateConverted DATE;

UPDATE NashvilleHousing
SET SalesDateConverted = CONVERT(DATE, SalesDate);

-- Populate Property Address data
ALTER TABLE NashvilleHousing
ADD PropertySplitAddress NVARCHAR(255),
    PropertySplitCity NVARCHAR(255);

UPDATE a
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1),
    PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress))
FROM NashvilleHousing a
JOIN (
    SELECT ParcelID, MIN(UniqueID) AS MinUniqueID
    FROM NashvilleHousing
    WHERE PropertyAddress IS NOT NULL
    GROUP BY ParcelID
) b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID] = b.MinUniqueID
WHERE a.PropertyAddress IS NULL;

-- Populate Owner Address data
ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress NVARCHAR(255),
    OwnerSplitCity NVARCHAR(255),
    OwnerSplitState NVARCHAR(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
    OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
    OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1);

-- Change Y and N to Yes and No in 'Sold as Vacant' field
UPDATE NashvilleHousing
SET SoldAsVacant = 
    CASE
        WHEN SoldAsVacant = 'Y' THEN 'Yes'
        WHEN SoldAsVacant = 'N' THEN 'No'
        ELSE SoldAsVacant
    END;

-- Remove duplicate rows based on specific columns
WITH RowNumCTE AS (
    SELECT *,
           ROW_NUMBER() OVER(
               PARTITION BY ParcelID,
                            PropertyAddress,
                            SalesPrice,
                            SalesDateConverted,
                            LegalReference
               ORDER BY UniqueID
           ) AS row_num
    FROM NashvilleHousing
)
DELETE
FROM RowNumCTE
WHERE row_num > 1;

-- Delete Unused Columns
ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress,
             TaxDistrict,
             PropertyAddress,
             SalesDate;

